/* Button | DropDownButton | ComboButton | ToggleButton
 * 
 * Styling Buttons mainly includes:
 * 
 * 1. Containers
 *    .dijitButton
 *    .dijitDropDownButton
 *    .dijitComboButton
 *    .dijitButtonNode - common button/arrow wrapper shared across all three button types 
 *
 * 2. Button text
 *    .dijitButtonText 
 * 
 * 3. Arrows - only for DropDownButton and ComboButton
 *       There are total four directions arrows - down, left, right, up:
 *    .dijitArrowButtonInner - down arrow by default
 *      .dijitLeftArrowButton .dijitArrowButtonInner - left arrow
 *      .dijitRightArrowButton .dijitArrowButtonInner - right arrow
 *      .dijitUpArrowButton .dijitArrowButtonInner - up arrow
 * 
 * 4. States - Hover, Active, Disabled, e.g.
 *    .dijitButtonHover .dijitButtonNode
 *    .dijitButtonActive .dijitButtonNode
 *    .dijitButtonDisabled .dijitButtonNode
 *      
 *      .dijitDisabled .dijitArrowButtonInner  - disabled arrow states 
 */

@type    : 'element';
@element : 'button';

@import (multiple) '../../theme.config';

.claro .dijitButton {
  overflow: hidden;
}

 .claro .dijitButtonNode,
 .claro .dijitButtonContents {
      /* Clean-up */
      border: none;
      vertical-align:inherit;
  }

.dijitButtonDisabled,
.dijitDropDownButtonDisabled,
.dijitComboButtonDisabled,
.dijitToggleButtonDisabled { 
  .dijitButtonNode {
    /* Inherit from Semantic Ui Button */
    .ui.disabled.button;
  }
}

/* arrow styles for down/up/left/right directions */

.dijitDropDownButton .dijitArrowButtonInner,
.dijitArrowButton  {
}

.dijitDropDownButton .dijitArrowButtonInner:before,
.dijitArrowButton:before {
	content: "\f0d7";
}

.dijitLeftArrowButton:before {
	content: "\f0d9";
}

.dijitRightArrowButton:before {
	content: "\f0da";
}

.dijitUpArrowButton:before {
	content: "\f0d8";
}

/*--------------
     Icon
---------------*/

.ui.button .dijitButtonText > .icon {
  height: @iconHeight;
  opacity: @iconOpacity;
  margin: @iconMargin;
  transition: @iconTransition;
  vertical-align: @iconVerticalAlign;
  color: @iconColor;
}

.ui.icon.buttons .button .dijitButtonText > .icon,
.ui.icon.button .dijitButtonText > .icon {
  .ui.icon.button > .icon;
}

.ui.button .dijitButtonText > .right.icon {
  margin: @rightIconMargin;
}

.ui.icon.button .dijitButtonNode {
    vertical-align: baseline;
}

/*--------------
  Labeled Icon
---------------*/
.ui.labeled.icon.buttons > .button .dijitButtonText > .icon,
.ui.labeled.icon.button .dijitButtonText > .icon {
  .ui.labeled.icon.button > .icon;
}

/* Left Labeled */
.ui.labeled.icon.buttons > .button .dijitButtonText > .icon,
.ui.labeled.icon.button .dijitButtonText > .icon {
  top: 0em;
  left: 0em;
}

/* Right Labeled */
.ui[class*="right labeled"].icon.button .dijitButtonText > .icon {
  left: auto;
  right: 0.2em; /* original 0.0em */
  border-radius: 0px;
  border-top-right-radius: inherit;
  border-bottom-right-radius: inherit;
  box-shadow: @labeledIconRightShadow;
}

.ui.labeled.icon.buttons > .button .dijitButtonText > .icon:before,
.ui.labeled.icon.button .dijitButtonText > .icon:before,
.ui.labeled.icon.buttons > .button .dijitButtonText > .icon:after,
.ui.labeled.icon.button .dijitButtonText > .icon:after {

  display: block;
  position: absolute;
  width: 100%;
  top: 50%;
  text-align: center;
  margin-top: -(@lineHeight / 2);
}

.ui.labeled.icon.buttons .button .dijitButtonText > .icon {
  border-radius: 0em;
}
.ui.labeled.icon.buttons .button .dijitButtonText:first-child > .icon {
  border-top-left-radius: @borderRadius;
  border-bottom-left-radius: @borderRadius;
}
.ui.labeled.icon.buttons .button .dijitButtonText:last-child > .icon {
  border-top-right-radius: @borderRadius;
  border-bottom-right-radius: @borderRadius;
}
.ui.vertical.labeled.icon.buttons .button .dijitButtonText:first-child > .icon {
  border-radius: 0em;
  border-top-left-radius: @borderRadius;
}
.ui.vertical.labeled.icon.buttons .button .dijitButtonText:last-child > .icon {
  border-radius: 0em;
  border-bottom-left-radius: @borderRadius;
}

.loadUIOverrides();